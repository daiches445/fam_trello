[{"C:\\Users\\Tal\\Documents\\GitHub\\fam_trello\\src\\index.js":"1","C:\\Users\\Tal\\Documents\\GitHub\\fam_trello\\src\\reportWebVitals.js":"2","C:\\Users\\Tal\\Documents\\GitHub\\fam_trello\\src\\App.js":"3","C:\\Users\\Tal\\Documents\\GitHub\\fam_trello\\src\\components\\FCRegister.jsx":"4","C:\\Users\\Tal\\Documents\\GitHub\\fam_trello\\src\\components\\Login_Page.jsx":"5","C:\\Users\\Tal\\Documents\\GitHub\\fam_trello\\src\\components\\CCBoard.jsx":"6","C:\\Users\\Tal\\Documents\\GitHub\\fam_trello\\src\\components\\FCAddNote.jsx":"7","C:\\Users\\Tal\\Documents\\GitHub\\fam_trello\\src\\components\\AlertDialog.jsx":"8"},{"size":559,"mtime":1611303172763,"results":"9","hashOfConfig":"10"},{"size":375,"mtime":1610964015155,"results":"11","hashOfConfig":"10"},{"size":2798,"mtime":1612985385351,"results":"12","hashOfConfig":"10"},{"size":10280,"mtime":1612981102529,"results":"13","hashOfConfig":"10"},{"size":4647,"mtime":1612984122554,"results":"14","hashOfConfig":"10"},{"size":9126,"mtime":1612985094290,"results":"15","hashOfConfig":"10"},{"size":5644,"mtime":1612896109544,"results":"16","hashOfConfig":"10"},{"size":1792,"mtime":1612960037317,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1am1rpq",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\Tal\\Documents\\GitHub\\fam_trello\\src\\index.js",[],["37","38"],"C:\\Users\\Tal\\Documents\\GitHub\\fam_trello\\src\\reportWebVitals.js",[],"C:\\Users\\Tal\\Documents\\GitHub\\fam_trello\\src\\App.js",["39","40"],"C:\\Users\\Tal\\Documents\\GitHub\\fam_trello\\src\\components\\FCRegister.jsx",["41","42","43"],"import React, { Component } from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport '../App.css'\r\nimport { Divider, Grid, Paper } from '@material-ui/core';\r\n\r\nclass Register extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            user_name: \"\",\r\n            password: \"\",\r\n            re_pass: \"\",\r\n            name: '',\r\n            family_ID: \"\",\r\n            family_name: \"\",\r\n\r\n            fam_det_dsp: \"flex\",\r\n            fam_crt_dsp: 'none',\r\n            create_family: false,\r\n\r\n            error_username: '',\r\n            error_pass: '',\r\n            error_repass: '',\r\n            error_name: '',\r\n            error_family_name:'',\r\n            error_fam_ID: '',\r\n            form_disabled:true\r\n        }\r\n    }\r\n\r\n    GotFamiliy = (e) => {\r\n        if (this.state.create_family)\r\n            this.setState({ create_family: false, fam_crt_dsp: 'none', fam_det_dsp: \"flex\", error_fam_ID:''})\r\n        else\r\n            this.setState({ create_family: true, fam_crt_dsp: 'flex', fam_det_dsp: \"none\", error_fam_ID:''})\r\n    }\r\n\r\n    SetVAl = (e) => {\r\n        let val = e.target.value;\r\n        let name = e.target.name;\r\n        switch (name) {\r\n            case 'username':\r\n                this.setState({ user_name: val ,error_username:''})\r\n                break;\r\n            case 'password':\r\n                if (val.length < 4) {\r\n                    this.setState({ error_pass: 'password to short' })\r\n                }\r\n                else\r\n                    this.setState({ password: val, error_pass: '' })\r\n                break;\r\n            case 're_pass':\r\n                this.setState({ re_pass: val })\r\n                break;\r\n            case 'name':\r\n                this.setState({ name: val })\r\n                break;\r\n            case 'family_name':\r\n                this.setState({ family_name: val })\r\n                break;\r\n            case 'family_ID':\r\n                this.setState({ family_ID: val ,error_fam_ID:''})\r\n                break;\r\n\r\n\r\n        }\r\n        this.EnableForm()\r\n    }\r\n\r\n    EnableForm = ()=>{\r\n        let fields_arr = [this.state.family_ID,this.state.family_name,this.state.name,this.state.password,this.state.re_pass,this.state.user_name]\r\n        if(fields_arr.findIndex((e) => e === '' ) !== -1)\r\n            return;\r\n        this.setState({form_disabled:false})\r\n    }\r\n\r\n    Register = () => {\r\n\r\n        debugger\r\n        if(this.state.user_name.length < 2){\r\n            this.setState({error_username:'invalid user'})\r\n            return\r\n        }\r\n\r\n        if (this.state.password.length < 4){\r\n            this.setState({error_pass:'must enter a pass'})\r\n            return\r\n        }\r\n            \r\n\r\n        if (this.state.password !== this.state.re_pass) {\r\n            this.setState({ error_repass: 'passwords dont match' })\r\n            return\r\n        }\r\n        else\r\n            this.setState({ error_repass: '' })\r\n\r\n        if (this.state.family_name === '') {\r\n            this.setState({ error_family_name: 'must enter a name' })\r\n            return\r\n        }\r\n        else\r\n            this.setState({ error_family_name: '' })\r\n\r\n\r\n\r\n        let currentFamily = this.props.app_data.family.find(fam => fam.ID === this.state.family_ID)\r\n        let currentUser = this.props.app_data.users.find(user => user.username === this.state.user_name)\r\n\r\n        if(currentUser === undefined){\r\n            let user = {user_name: this.state.user_name, password: this.state.password, fam_id: this.state.family_ID }\r\n            if(this.state.create_family){\r\n                if(currentFamily === undefined){\r\n                    let fam = {ID:this.state.family_ID, name:this.state.family_name}\r\n                    this.props.AddFamily(fam)\r\n                    this.props.sendUserToRegister(user)\r\n                    alert('Hi,'+this.state.name+' Welcome to the family.' )\r\n                    this.props.history.push('/')\r\n                }\r\n                else{\r\n                    this.setState({error_fam_ID:'Taken!'})\r\n                    return\r\n                }\r\n            }\r\n            else{\r\n                if(currentFamily === undefined){\r\n                    this.setState({error_fam_ID:'start a new family or insert valid ID'})\r\n                    return\r\n                }\r\n                else{\r\n                    alert('Hi,'+this.state.name+' Welcome to the family.' )\r\n                    this.props.sendUserToRegister(user)\r\n                    this.props.history.push('/')\r\n\r\n                }\r\n            }\r\n            \r\n        }\r\n        else\r\n            this.setState({error_username:'invalid user name'})\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"container\">\r\n                <Paper elevation='6' style={{width:'50%'}}>\r\n                    <Grid container  direction='column' spacing='3' alignItems='center'>\r\n                        <Grid item >\r\n                            <h1>Register</h1></Grid>\r\n                        <Grid item xs='12'>\r\n                            <TextField required  helperText={this.state.error_username} error={this.state.error_username} name=\"username\" id=\"filled-basic\" label=\"User Name\" variant=\"outlined\" onChange={this.SetVAl} />\r\n                        </Grid>\r\n                      \r\n                        <Divider></Divider>\r\n                        <Grid item spacing='1'>\r\n                            <Grid container spacing='1'>\r\n                                <Grid item xs='6'>\r\n                                    <TextField helperText={this.state.error_pass} error={this.state.error_pass} name=\"password\" id=\"outlined-basic\" type='Password' label=\"password\" variant=\"outlined\" onChange={this.SetVAl} /></Grid>\r\n                                <Grid item xs='6'>\r\n                                    <TextField helperText={this.state.error_repass} error={this.state.error_repass} name=\"re_pass\" id=\"outlined-basic\" type='Password' label=\"ReEnter Password\" variant=\"outlined\" onChange={this.SetVAl} />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Grid container spacing='1'>\r\n                                <Grid item xs='6'>\r\n                                    <TextField error={this.state.e} name=\"name\" id=\"outlined-basic\" label=\"Name\" variant=\"outlined\" onChange={this.SetVAl} />\r\n                                </Grid>\r\n                                <Grid item xs='6'>\r\n                                    <TextField name=\"family_name\" id=\"outlined-basic\" label=\"Family name\" variant=\"outlined\" onChange={this.SetVAl} />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid item xs = '12'>\r\n                            <Grid container direction='row' alignItems='center' >\r\n                                <Grid item style={{ padding: '10px' }}>\r\n                                    <h2 htmlFor=\"\">Create A family?</h2>\r\n                                </Grid>\r\n                                <Grid item xs = '2'>\r\n                                    <Switch\r\n                                        checked={this.state.got_fam}\r\n                                        onChange={this.GotFamiliy}\r\n                                        name=\"checkedA\"\r\n                                        inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs='12' style={{ display: this.state.fam_det_dsp, flexDirection: 'column' }}>\r\n                            <Grid container direction='column' alignItems='center' spacing ='2'>\r\n                                <Grid item >\r\n                                    <label htmlFor=\"\">Enter Your family ID</label>\r\n                                </Grid>\r\n                                <Grid item >\r\n                                    <TextField error={this.state.error_fam_ID} helperText={this.state.error_fam_ID} name=\"family_ID\"  id=\"outlined-basic\" label=\"Family ID\" variant=\"outlined\" onChange={this.SetVAl} />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                        <Grid item  style={{ display: this.state.fam_crt_dsp }}>\r\n                            <Grid container direction = 'row' alignContent='center' justify=\"center\" spacing ='2'>\r\n                                <Grid item align='center' justify='center' xs='12'>\r\n                                    <label htmlFor=\"\">Add Your Family</label>\r\n                                </Grid>\r\n                                <Grid item >\r\n                                    <TextField error={this.state.error_fam_ID} name=\"family_ID\" id=\"outlined-basic\" label=\"Family ID\" variant=\"outlined\" helperText={this.state.error_fam_ID === ''?'Suggested :' +' \\' ' + this.state.family_name +'\\'+' + ' some number.':this.state.error_fam_ID} onChange={this.SetVAl}/>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField  defaultValue={this.state.family_name} Value={this.state.family_name} name=\"famCreate_fam_name\" id=\"outlined-basic\"  label=\"Family name\" variant=\"outlined\" onChange={this.SetVAl}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Divider></Divider>\r\n                        <Grid item>\r\n                            <Button disabled = {this.state.form_disabled} onClick={this.Register} color='primary' style={{ marginBottom: '3vh' }}>Register</Button>\r\n                        </Grid>\r\n                        <Divider></Divider>\r\n\r\n                    </Grid>\r\n                </Paper>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n\r\n}\r\nexport default withRouter(Register)\r\n","C:\\Users\\Tal\\Documents\\GitHub\\fam_trello\\src\\components\\Login_Page.jsx",[],"C:\\Users\\Tal\\Documents\\GitHub\\fam_trello\\src\\components\\CCBoard.jsx",["44","45","46","47"],"import { Grid, IconButton, Paper, Divider, Button } from '@material-ui/core';\r\nimport PostAddIcon from '@material-ui/icons/PostAdd';\r\nimport React, { Component } from 'react'\r\nimport FCAddNote from './FCAddNote';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport AlertDialog from './AlertDialog'\r\nimport AlertDialogSlide from './AlertDialog';\r\nexport default class Board extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            currentFamily: this.props.data.family,\r\n            currentMember: this.props.data.user,\r\n            addNoteDisplay: '',\r\n            options: [\r\n                'Edit',\r\n                'Delete',\r\n                // 'Info',\r\n\r\n            ],\r\n            anchorEl: '',\r\n            open: false,\r\n            currentTasksIndex: 0,\r\n            board_z_index: 0\r\n\r\n        }\r\n\r\n\r\n        var ITEM_HEIGHT = 48;\r\n        this.taskRef = React.createRef();\r\n    }\r\n    getNoteToAdd = (note) => {\r\n        this.props.sendNote(note)\r\n    }\r\n    openOrCloseAddNote = () => {\r\n        this.state.addNoteDisplay === '' ? this.setState({ addNoteDisplay: <FCAddNote sendNote={this.getNoteToAdd} exitFunc={this.openOrCloseAddNote} />, board_z_index: -1 }) : this.setState({ addNoteDisplay: '', board_z_index: 0 })\r\n    }\r\n\r\n    setAnchorEl = (data) => {\r\n        this.setState({ anchorEl: data })\r\n\r\n    }\r\n\r\n    handleClick = async (event) => {\r\n        this.setAnchorEl(event.currentTarget);\r\n        console.log(event);\r\n        this.setState({ open: !this.state.open })\r\n        await this.setState({ currentTasksIndex: event.target.id })\r\n\r\n        console.log(this.state.currentTasksIndex);\r\n    };\r\n\r\n    handleClose = (e) => {\r\n        console.log(e.target.title)\r\n        console.log(this.taskRef.current);\r\n        this.setAnchorEl(null);\r\n        this.setState({ open: false, currentTasksIndex: 0 })\r\n\r\n        switch (e.target.id) {\r\n            case 'Delete':\r\n                this.props.deleteTask(this.props.data.family.notes[this.state.currentTasksIndex])\r\n                break;\r\n            case 'Info':\r\n\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className='container' >\r\n                {this.state.addNoteDisplay}\r\n                {console.log(this.state)}\r\n                <Paper style={{ zIndex: this.state.board_z_index }}>\r\n\r\n                    <Grid container direction='column' spacing='' >\r\n                        <Grid container alignItems='center'>\r\n                            <Grid item xs='2'>\r\n                                <IconButton onClick={this.openOrCloseAddNote} >\r\n                                    <PostAddIcon color='primary' style={{ fontSize: '100' }}></PostAddIcon>\r\n                                </IconButton>\r\n                            </Grid>\r\n                            <Grid item xs='9' style={{ alignSelf: 'center', margin: '0px' }}> <h1 style={{ alignSelf: 'center', margin: '0px' }}>welcome,{this.state.currentMember.username}</h1></Grid>\r\n                        </Grid>\r\n\r\n                        <Grid container direction='row' >\r\n                            <Grid item xs=\"2\"><h2>tasks</h2></Grid>\r\n                            <Grid container direction='row' xs='9'>\r\n                                <div className='tasks_bar' >\r\n                                    {\r\n                                        this.props.data.family.notes.length === 0 ? \"NO TASKS\":\r\n                                        this.props.data.family.notes.map((note, index) => (\r\n                                            <li className='task'>\r\n                                                <Grid container >\r\n                                                    <Grid item xs={10}><h3 id={note.title} >{note.title}</h3>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={2}>\r\n                                                        <IconButton\r\n                                                            className='info_dots_btn'\r\n                                                            aria-label=\"more\"\r\n                                                            aria-controls=\"long-menu\"\r\n                                                            aria-haspopup=\"true\"\r\n\r\n                                                        >\r\n                                                            <MoreVertIcon id={index}\r\n                                                                onClick={this.handleClick} />\r\n                                                        </IconButton>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                <p style={{ padding: '1px' }}>{note.text}</p>\r\n                                            </li>\r\n                                        )\r\n\r\n                                        )\r\n                                        }\r\n                                    <Menu\r\n                                        id=\"long-menu\"\r\n                                        anchorEl={this.state.anchorEl}\r\n                                        keepMounted\r\n                                        open={this.state.open}\r\n                                        onClose={this.handleClose}\r\n                                        PaperProps={{\r\n                                            style: {\r\n                                                maxHeight: this.ITEM_HEIGHT * 4.5,\r\n                                                width: '20ch',\r\n                                            },\r\n                                        }}\r\n                                    >\r\n                                        {this.state.options.map((option) => (\r\n                                            <MenuItem key={option} id={option} onClick={this.handleClose}>\r\n\r\n                                                {option}\r\n                                            </MenuItem>\r\n\r\n                                        ))}\r\n                                        <MenuItem>\r\n                                            <AlertDialog handleClose = {()=>this.setState({open:false})} name=\"Info\" info={this.props.data.family.notes[this.state.currentTasksIndex] === undefined ? \"\" : this.props.data.family.notes[this.state.currentTasksIndex]}></AlertDialog>\r\n                                        </MenuItem>\r\n                                    </Menu>\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Divider></Divider>\r\n\r\n                        <Grid container direction='row'> {/* third line ,tasks */}\r\n                            <Grid item xs=\"2\"><h2>my tasks</h2></Grid>\r\n                            <Grid container direction='row' xs='9'> {/* tasks container*/}\r\n                                {/*map function*/}\r\n                                <div className='tasks_bar' >\r\n                                    <li className='task'><h3>title</h3>task</li>\r\n                                    <li className='task'><h3>title</h3>task</li>\r\n                                    <li className='task'><h3>title</h3>task</li>\r\n                                    <li className='task'><h3>title</h3>task</li>\r\n                                    <li className='task'><h3>title</h3>task</li>\r\n                                    <li className='task'><h3>title</h3>task</li>\r\n                                    <li className='task'><h3>title</h3>task</li>\r\n                                    <li className='task'><h3>title</h3>task</li>\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container direction='row'>\r\n                            <Grid item xs=\"2\"><h2>finished tasks</h2></Grid>\r\n                            <Grid container direction='row' xs='9'> {/* tasks container*/}\r\n                                {/*map function*/}\r\n                                <div className='tasks_bar' >\r\n                                    <li className='task'>task</li>\r\n                                    <li className='task'>task</li>\r\n\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n\r\n            </div >\r\n        )\r\n    }\r\n}\r\n{/* <p>Current member: {this.state.currentMember} - {this.state.currentFamily}</p>\r\n<p>Family Tickets: {this.state.currentFamily}</p>\r\n<div>{this.state.Families.find(family=>family.familyName === this.state.currentFamily).familyTickets === undefined ? 'NO FAMILY':\r\nthis.state.Families.find(family=>family.familyName === this.state.currentFamily).familyTickets.map((ticket,index)=><p>{index} - {ticket.title}</p>)}</div> */}","C:\\Users\\Tal\\Documents\\GitHub\\fam_trello\\src\\components\\FCAddNote.jsx",[],"C:\\Users\\Tal\\Documents\\GitHub\\fam_trello\\src\\components\\AlertDialog.jsx",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":56,"column":67,"nodeType":"54","messageId":"55","endLine":56,"endColumn":69},{"ruleId":"56","severity":1,"message":"57","line":80,"column":44,"nodeType":"58","endLine":80,"endColumn":114},{"ruleId":"59","severity":1,"message":"60","line":45,"column":9,"nodeType":"61","messageId":"62","endLine":70,"endColumn":10},{"ruleId":"63","severity":1,"message":"64","line":215,"column":211,"nodeType":"54","messageId":"65","endLine":215,"endColumn":212},{"ruleId":"63","severity":1,"message":"64","line":215,"column":251,"nodeType":"54","messageId":"65","endLine":215,"endColumn":252},{"ruleId":"66","severity":1,"message":"67","line":1,"column":44,"nodeType":"68","messageId":"69","endLine":1,"endColumn":50},{"ruleId":"66","severity":1,"message":"70","line":9,"column":8,"nodeType":"68","messageId":"69","endLine":9,"endColumn":24},{"ruleId":"66","severity":1,"message":"71","line":32,"column":13,"nodeType":"68","messageId":"69","endLine":32,"endColumn":24},{"ruleId":"72","severity":1,"message":"73","line":188,"column":1,"nodeType":"74","messageId":"75","endLine":191,"endColumn":159},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react/jsx-pascal-case","Imported JSX component Login_Page must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'AlertDialogSlide' is defined but never used.","'ITEM_HEIGHT' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-global-assign","no-unsafe-negation"]