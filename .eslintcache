[{"C:\\Users\\nir\\Documents\\GitHub\\fam_trello1\\src\\index.js":"1","C:\\Users\\nir\\Documents\\GitHub\\fam_trello1\\src\\App.js":"2","C:\\Users\\nir\\Documents\\GitHub\\fam_trello1\\src\\reportWebVitals.js":"3","C:\\Users\\nir\\Documents\\GitHub\\fam_trello1\\src\\components\\Login_Page.jsx":"4","C:\\Users\\nir\\Documents\\GitHub\\fam_trello1\\src\\components\\CCBoard.jsx":"5","C:\\Users\\nir\\Documents\\GitHub\\fam_trello1\\src\\components\\FCRegister.jsx":"6","C:\\Users\\nir\\Documents\\GitHub\\fam_trello1\\src\\components\\FCAddNote.jsx":"7","C:\\Users\\nir\\Documents\\GitHub\\fam_trello1\\src\\components\\AlertDialog.jsx":"8","C:\\Users\\nir\\Documents\\GitHub\\fam_trello1\\src\\components\\AddNoteDialog.jsx":"9","C:\\Users\\nir\\Documents\\GitHub\\fam_trello1\\src\\components\\DescriptionAlert.jsx":"10","C:\\Users\\nir\\Documents\\GitHub\\fam_trello1\\src\\components\\TitleAlert.jsx":"11","C:\\Users\\nir\\Documents\\GitHub\\fam_trello1\\src\\components\\DatesAlert.jsx":"12","C:\\Users\\nir\\Documents\\GitHub\\fam_trello1\\src\\components\\EditAlertDialog.jsx":"13"},{"size":559,"mtime":1612194458699,"results":"14","hashOfConfig":"15"},{"size":3295,"mtime":1613243242326,"results":"16","hashOfConfig":"15"},{"size":375,"mtime":1612194458699,"results":"17","hashOfConfig":"15"},{"size":4671,"mtime":1613076582485,"results":"18","hashOfConfig":"15"},{"size":10524,"mtime":1613241122327,"results":"19","hashOfConfig":"15"},{"size":10312,"mtime":1613129182007,"results":"20","hashOfConfig":"15"},{"size":5644,"mtime":1612898309510,"results":"21","hashOfConfig":"15"},{"size":2058,"mtime":1613232725206,"results":"22","hashOfConfig":"15"},{"size":5809,"mtime":1613233625288,"results":"23","hashOfConfig":"15"},{"size":2163,"mtime":1613240640087,"results":"24","hashOfConfig":"15"},{"size":2094,"mtime":1613234757121,"results":"25","hashOfConfig":"15"},{"size":2298,"mtime":1613231804815,"results":"26","hashOfConfig":"15"},{"size":6855,"mtime":1613243831503,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"ll2cbd",{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\nir\\Documents\\GitHub\\fam_trello1\\src\\index.js",[],["58","59"],"C:\\Users\\nir\\Documents\\GitHub\\fam_trello1\\src\\App.js",["60","61"],"C:\\Users\\nir\\Documents\\GitHub\\fam_trello1\\src\\reportWebVitals.js",[],"C:\\Users\\nir\\Documents\\GitHub\\fam_trello1\\src\\components\\Login_Page.jsx",[],"C:\\Users\\nir\\Documents\\GitHub\\fam_trello1\\src\\components\\CCBoard.jsx",["62","63","64","65","66","67","68","69"],"import { Grid, IconButton, Paper, Divider, Button } from '@material-ui/core';\r\nimport PostAddIcon from '@material-ui/icons/PostAdd';\r\nimport React, { Component } from 'react'\r\nimport FCAddNote from './FCAddNote';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport AlertDialog from './AlertDialog'\r\nimport AlertDialogSlide from './AlertDialog';\r\nimport FCAddNoteDialog from './AddNoteDialog'\r\nimport EditAlertDialog from './EditAlertDialog'\r\nexport default class Board extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            currentFamily: this.props.data.family,\r\n            currentMember: this.props.data.user,\r\n            addNoteDisplay: '',\r\n            options: [\r\n                'Delete',\r\n                // 'Info',\r\n\r\n            ],\r\n            anchorEl: '',\r\n            open: false,\r\n            currentTasksIndex: 0,\r\n            board_z_index: 0\r\n\r\n        }\r\n\r\n\r\n        var ITEM_HEIGHT = 48;\r\n        this.taskRef = React.createRef();\r\n    }\r\n    getNoteToAdd = (note) => {\r\n        this.props.sendNote(note)\r\n    }\r\n    getNoteToEdit = (note) => {\r\n        this.props.editNote(note)\r\n    }\r\n    openOrCloseAddNote = () => {\r\n        this.state.addNoteDisplay === '' ? this.setState({ addNoteDisplay: <FCAddNoteDialog sendNote={this.getNoteToAdd} exitFunc={this.openOrCloseAddNote} />, board_z_index: -1 }) : this.setState({ addNoteDisplay: '', board_z_index: 0 })\r\n    }\r\n\r\n    setAnchorEl = (data) => {\r\n        this.setState({ anchorEl: data })\r\n    }\r\n\r\n    handleClick = async (event) => {\r\n        this.setAnchorEl(event.currentTarget);\r\n        this.setState({ open: !this.state.open })\r\n        await this.setState({ currentTasksIndex: event.target.id })\r\n\r\n        console.log(this.state.currentTasksIndex);\r\n    };\r\n\r\n    handleClose = (e) => {\r\n        console.log(e.target.title)\r\n        console.log(this.taskRef.current);\r\n        this.setAnchorEl(null);\r\n        this.setState({ open: false, currentTasksIndex: 0 })\r\n\r\n        switch (e.target.id) {\r\n            case 'Delete':\r\n                this.props.deleteTask(this.props.data.family.notes[this.state.currentTasksIndex])\r\n                break;\r\n            case 'Info':\r\n                   \r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className='container' >\r\n                \r\n                {console.log(this.state)}\r\n                <Paper style={{ zIndex: this.state.board_z_index }}>\r\n                    <Grid container direction='column' spacing={3}>\r\n\r\n                        <Grid item >\r\n                            <Grid container >\r\n\r\n                                <Grid item xs='2'>\r\n                               \r\n                                 <FCAddNoteDialog sendNote={this.getNoteToAdd} exitFunc={this.openOrCloseAddNote} />\r\n                                </Grid>\r\n                                <Grid item xs='9' style={{ alignSelf: 'center', margin: '0px' }}>\r\n                                    <h1 style={{ alignSelf: 'center', margin: '0px' }}>welcome</h1></Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12}>\r\n                            <Grid container direction='row' >\r\n                                <Grid item xs=\"2\" align='center'><h2>tasks</h2></Grid>\r\n                                <Grid container direction='row' xs='9'>\r\n                                    <div className='tasks_bar' >\r\n                                        {\r\n                                            this.props.data.family.notes.length === 0 ? \"NO TASKS\" :\r\n                                                this.props.data.family.notes.map((note, index) => (\r\n                                                    <li key={index} className='task'>\r\n                                                        <Grid container >\r\n                                                            <Grid item xs={10}><h3 id={note.title} >{note.title}</h3></Grid>\r\n                                                            <Grid item xs={2}>\r\n                                                                <IconButton\r\n                                                                    className='info_dots_btn'\r\n                                                                    aria-label=\"more\"\r\n                                                                    aria-controls=\"long-menu\"\r\n                                                                    aria-haspopup=\"true\">\r\n                                                                    <MoreVertIcon id={index} onClick={this.handleClick} />\r\n                                                                </IconButton>\r\n                                                            </Grid>\r\n                                                        </Grid>\r\n                                                        \r\n                                                        <p style={{ padding: '1px' }}>\r\n                                                        {note.start_date!=undefined?note.start_date:\"\"} -  {note.end_date!=undefined?note.end_date:\"\"} \r\n                                                        <br/>\r\n                                                            {note.text}\r\n                                                            </p>\r\n                                                    </li>\r\n                                                )\r\n\r\n                                                )\r\n                                        }\r\n\r\n                                        <Menu\r\n                                            id=\"long-menu\"\r\n                                            anchorEl={this.state.anchorEl}\r\n                                            keepMounted\r\n                                            open={this.state.open}\r\n                                            onClose={this.handleClose}\r\n                                            PaperProps={{\r\n                                                style: {\r\n                                                    maxHeight: this.ITEM_HEIGHT * 4.5,\r\n                                                    width: '20ch',\r\n                                                },\r\n                                            }}\r\n                                        >\r\n                                            {this.state.options.map((option) => (\r\n                                                <MenuItem key={option} id={option} onClick={this.handleClose}>\r\n\r\n                                                    {option}\r\n                                                </MenuItem>\r\n\r\n                                            ))}\r\n                                            <MenuItem>\r\n                                                <AlertDialog handleClose={() => this.setState({ open: false })} name=\"Info\" info={this.props.data.family.notes[this.state.currentTasksIndex] === undefined ? \"\" : this.props.data.family.notes[this.state.currentTasksIndex]}></AlertDialog>\r\n                                            </MenuItem>\r\n                                            <MenuItem>\r\n                                            <EditAlertDialog note = {this.props.data.family.notes[this.state.currentTasksIndex]} sendNote={this.getNoteToAdd} getNoteToEdit1 = {this.getNoteToEdit} exitFunc={this.openOrCloseAddNote} />\r\n                                            </MenuItem>\r\n                                        </Menu>\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n\r\n                        <Divider></Divider>\r\n\r\n                        <Grid item xs={12}>\r\n                            <Grid container direction='row' > {/* third line ,tasks */}\r\n                                <Grid item xs=\"2\" align='center'><h2>my tasks</h2></Grid>\r\n                                <Grid container direction='row' xs='9'> {/* tasks container*/}\r\n                                    {/*map function*/}\r\n                                    <div className='tasks_bar' >\r\n                                        <li className='task'><h3>title</h3>task</li>\r\n                                        <li className='task'><h3>title</h3>task</li>\r\n                                        <li className='task'><h3>title</h3>task</li>\r\n                                        <li className='task'><h3>title</h3>task</li>\r\n                                        <li className='task'><h3>title</h3>task</li>\r\n                                        <li className='task'><h3>title</h3>task</li>\r\n                                        <li className='task'><h3>title</h3>task</li>\r\n                                        <li className='task'><h3>title</h3>task</li>\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n\r\n\r\n                        <Divider></Divider>\r\n\r\n                        <Grid item xs={12}>\r\n                            <Grid container direction='row'>\r\n                                <Grid item xs=\"2\" align='center'><h2>finished tasks</h2></Grid>\r\n                                <Grid container direction='row' xs='9'> {/* tasks container*/}\r\n                                    {/*map function*/}\r\n                                    <div className='tasks_bar' >\r\n                                        <li className='task'>task</li>\r\n                                        <li className='task'>task</li>\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n\r\n                    </Grid>\r\n                </Paper>\r\n\r\n            </div >\r\n        )\r\n    }\r\n}\r\n{/* <p>Current member: {this.state.currentMember} - {this.state.currentFamily}</p>\r\n<p>Family Tickets: {this.state.currentFamily}</p>\r\n<div>{this.state.Families.find(family=>family.familyName === this.state.currentFamily).familyTickets === undefined ? 'NO FAMILY':\r\nthis.state.Families.find(family=>family.familyName === this.state.currentFamily).familyTickets.map((ticket,index)=><p>{index} - {ticket.title}</p>)}</div> */}","C:\\Users\\nir\\Documents\\GitHub\\fam_trello1\\src\\components\\FCRegister.jsx",["70","71","72"],"import React, { Component } from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport '../App.css'\r\nimport { Divider, Grid, Paper } from '@material-ui/core';\r\n\r\nclass Register extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            user_name: \"\",\r\n            password: \"\",\r\n            re_pass: \"\",\r\n            name: '',\r\n            family_ID: \"\",\r\n            family_name: \"\",\r\n\r\n            fam_det_dsp: \"flex\",\r\n            fam_crt_dsp: 'none',\r\n            create_family: false,\r\n\r\n            error_username: '',\r\n            error_pass: '',\r\n            error_repass: '',\r\n            error_name: '',\r\n            error_family_name:'',\r\n            error_fam_ID: '',\r\n            form_disabled:true\r\n        }\r\n    }\r\n\r\n    GotFamiliy = (e) => {\r\n        if (this.state.create_family)\r\n            this.setState({ create_family: false, fam_crt_dsp: 'none', fam_det_dsp: \"flex\", error_fam_ID:''})\r\n        else\r\n            this.setState({ create_family: true, fam_crt_dsp: 'flex', fam_det_dsp: \"none\", error_fam_ID:''})\r\n    }\r\n\r\n    SetVAl = (e) => {\r\n        let val = e.target.value;\r\n        let name = e.target.name;\r\n        switch (name) {\r\n            case 'username':\r\n                this.setState({ user_name: val ,error_username:''})\r\n                break;\r\n            case 'password':\r\n                if (val.length < 4) {\r\n                    this.setState({ error_pass: 'password to short' })\r\n                }\r\n                else\r\n                    this.setState({ password: val, error_pass: '' })\r\n                break;\r\n            case 're_pass':\r\n                this.setState({ re_pass: val })\r\n                break;\r\n            case 'name':\r\n                this.setState({ name: val })\r\n                break;\r\n            case 'family_name':\r\n                this.setState({ family_name: val })\r\n                break;\r\n            case 'family_ID':\r\n                this.setState({ family_ID: val ,error_fam_ID:''})\r\n                break;\r\n\r\n\r\n        }\r\n        this.EnableForm()\r\n    }\r\n\r\n    EnableForm = ()=>{\r\n        let fields_arr = [this.state.family_ID,this.state.family_name,this.state.name,this.state.password,this.state.re_pass,this.state.user_name]\r\n        if(fields_arr.findIndex((e) => e === '' ) !== -1)\r\n            return;\r\n        this.setState({form_disabled:false})\r\n    }\r\n\r\n    Register = () => {\r\n\r\n        debugger\r\n        if(this.state.user_name.length < 2){\r\n            this.setState({error_username:'invalid user'})\r\n            return\r\n        }\r\n\r\n        if (this.state.password.length < 4){\r\n            this.setState({error_pass:'must enter a pass'})\r\n            return\r\n        }\r\n            \r\n\r\n        if (this.state.password !== this.state.re_pass) {\r\n            this.setState({ error_repass: 'passwords dont match' })\r\n            return\r\n        }\r\n        else\r\n            this.setState({ error_repass: '' })\r\n\r\n        if (this.state.family_name === '') {\r\n            this.setState({ error_family_name: 'must enter a name' })\r\n            return\r\n        }\r\n        else\r\n            this.setState({ error_family_name: '' })\r\n\r\n\r\n\r\n        let currentFamily = this.props.app_data.family.find(fam => fam.ID === this.state.family_ID)\r\n        let currentUser = this.props.app_data.users.find(user => user.username === this.state.user_name)\r\n\r\n        if(currentUser === undefined){\r\n            let user = {user_name: this.state.user_name, password: this.state.password, fam_id: this.state.family_ID }\r\n            if(this.state.create_family){\r\n                if(currentFamily === undefined){\r\n                    let fam = {ID:this.state.family_ID, name:this.state.family_name}\r\n                    this.props.AddFamily(fam)\r\n                    this.props.sendUserToRegister(user)\r\n                    alert('Hi,'+this.state.name+' Welcome to the family.' )\r\n                    this.props.history.push('/')\r\n                }\r\n                else{\r\n                    this.setState({error_fam_ID:'Taken!'})\r\n                    return\r\n                }\r\n            }\r\n            else{\r\n                if(currentFamily === undefined){\r\n                    this.setState({error_fam_ID:'start a new family or insert valid ID'})\r\n                    return\r\n                }\r\n                else{\r\n                    alert('Hi,'+this.state.name+' Welcome to the family.' )\r\n                    this.props.sendUserToRegister(user)\r\n                    this.props.history.push('/')\r\n\r\n                }\r\n            }\r\n            \r\n        }\r\n        else\r\n            this.setState({error_username:'invalid user name'})\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"container\">\r\n                <Paper elevation='6' style={{width:'30%'}}>\r\n                    <Grid container  direction='column' spacing='3' alignItems='center'>\r\n                        <Grid item >\r\n                            <h2 style={{fontSize:'4ch'}}>Register</h2></Grid>\r\n                        <Grid item xs='12'>\r\n                            <TextField required  helperText={this.state.error_username} error={this.state.error_username} name=\"username\" id=\"filled-basic\" label=\"User Name\" variant=\"outlined\" onChange={this.SetVAl} />\r\n                        </Grid>\r\n                      \r\n                        <Divider></Divider>\r\n                        <Grid item spacing='1'>\r\n                            <Grid container spacing='1'>\r\n                                <Grid item xs='6'>\r\n                                    <TextField helperText={this.state.error_pass} error={this.state.error_pass} name=\"password\" id=\"outlined-basic\" type='Password' label=\"password\" variant=\"outlined\" onChange={this.SetVAl} /></Grid>\r\n                                <Grid item xs='6'>\r\n                                    <TextField helperText={this.state.error_repass} error={this.state.error_repass} name=\"re_pass\" id=\"outlined-basic\" type='Password' label=\"ReEnter Password\" variant=\"outlined\" onChange={this.SetVAl} />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Grid container spacing='1'>\r\n                                <Grid item xs='6'>\r\n                                    <TextField error={this.state.e} name=\"name\" id=\"outlined-basic\" label=\"Name\" variant=\"outlined\" onChange={this.SetVAl} />\r\n                                </Grid>\r\n                                <Grid item xs='6'>\r\n                                    <TextField name=\"family_name\" id=\"outlined-basic\" label=\"Family name\" variant=\"outlined\" onChange={this.SetVAl} />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid item xs = '12'>\r\n                            <Grid container direction='row' alignItems='center' >\r\n                                <Grid item style={{ padding: '10px' }}>\r\n                                    <h2 htmlFor=\"\">Create A family?</h2>\r\n                                </Grid>\r\n                                <Grid item xs = '2'>\r\n                                    <Switch\r\n                                        checked={this.state.got_fam}\r\n                                        onChange={this.GotFamiliy}\r\n                                        name=\"checkedA\"\r\n                                        inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs='12' style={{ display: this.state.fam_det_dsp, flexDirection: 'column' }}>\r\n                            <Grid container direction='column' alignItems='center' spacing ='2'>\r\n                                <Grid item >\r\n                                    <label htmlFor=\"\">Enter Your family ID</label>\r\n                                </Grid>\r\n                                <Grid item >\r\n                                    <TextField error={this.state.error_fam_ID} helperText={this.state.error_fam_ID} name=\"family_ID\"  id=\"outlined-basic\" label=\"Family ID\" variant=\"outlined\" onChange={this.SetVAl} />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                        <Grid item  style={{ display: this.state.fam_crt_dsp }}>\r\n                            <Grid container direction = 'row' alignContent='center' justify=\"center\" spacing ='2'>\r\n                                <Grid item align='center' justify='center' xs='12'>\r\n                                    <label htmlFor=\"\">Add Your Family</label>\r\n                                </Grid>\r\n                                <Grid item >\r\n                                    <TextField  error={this.state.error_fam_ID} name=\"family_ID\" id=\"outlined-basic\" label=\"Family ID\" variant=\"outlined\" helperText={this.state.error_fam_ID === ''?'Suggested :' +' \\' ' + this.state.family_name +'\\'+' + ' some number.':this.state.error_fam_ID} onChange={this.SetVAl}/>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField noWarp defaultValue={this.state.family_name} Value={this.state.family_name} name=\"famCreate_fam_name\" id=\"outlined-basic\"  label=\"Family name\" variant=\"outlined\" onChange={this.SetVAl}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Divider></Divider>\r\n                        <Grid item>\r\n                            <Button disabled = {this.state.form_disabled} onClick={this.Register} color='primary' style={{ marginBottom: '3vh' }}>Register</Button>\r\n                        </Grid>\r\n                        <Divider></Divider>\r\n\r\n                    </Grid>\r\n                </Paper>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n\r\n}\r\nexport default withRouter(Register)\r\n","C:\\Users\\nir\\Documents\\GitHub\\fam_trello1\\src\\components\\FCAddNote.jsx",[],"C:\\Users\\nir\\Documents\\GitHub\\fam_trello1\\src\\components\\AlertDialog.jsx",["73","74","75"],"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\n\r\nexport default function AlertDialogSlide(props) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const name = React.useState(props.name)\r\n \r\n  \r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    props.handleClose()\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        {name}\r\n      </Button>\r\n      <Dialog\r\n        open={open}\r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-slide-title\"\r\n        aria-describedby=\"alert-dialog-slide-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-slide-title\">{props.info.title}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-slide-description\">\r\n          {props.info.start_date!=\"\" ? props.info.start_date:\"\"} -     {props.info.end_date!=\"\" ? props.info.end_date:\"\"}<br/>\r\n            {props.info.text}<br/>\r\n            {props.info.tagged_users === undefined ? \"\" : props.info.tagged_users.map((user,index)=>index != 0 ? \", \" + user:user)}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            OK\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\nir\\Documents\\GitHub\\fam_trello1\\src\\components\\AddNoteDialog.jsx",[],"C:\\Users\\nir\\Documents\\GitHub\\fam_trello1\\src\\components\\DescriptionAlert.jsx",[],"C:\\Users\\nir\\Documents\\GitHub\\fam_trello1\\src\\components\\TitleAlert.jsx",[],"C:\\Users\\nir\\Documents\\GitHub\\fam_trello1\\src\\components\\DatesAlert.jsx",[],"C:\\Users\\nir\\Documents\\GitHub\\fam_trello1\\src\\components\\EditAlertDialog.jsx",["76"],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":55,"column":67,"nodeType":"83","messageId":"84","endLine":55,"endColumn":69},{"ruleId":"85","severity":1,"message":"86","line":93,"column":44,"nodeType":"87","endLine":93,"endColumn":114},{"ruleId":"88","severity":1,"message":"89","line":1,"column":44,"nodeType":"90","messageId":"91","endLine":1,"endColumn":50},{"ruleId":"88","severity":1,"message":"92","line":2,"column":8,"nodeType":"90","messageId":"91","endLine":2,"endColumn":19},{"ruleId":"88","severity":1,"message":"93","line":4,"column":8,"nodeType":"90","messageId":"91","endLine":4,"endColumn":17},{"ruleId":"88","severity":1,"message":"94","line":9,"column":8,"nodeType":"90","messageId":"91","endLine":9,"endColumn":24},{"ruleId":"88","severity":1,"message":"95","line":33,"column":13,"nodeType":"90","messageId":"91","endLine":33,"endColumn":24},{"ruleId":"81","severity":1,"message":"82","line":123,"column":73,"nodeType":"83","messageId":"84","endLine":123,"endColumn":75},{"ruleId":"81","severity":1,"message":"82","line":123,"column":122,"nodeType":"83","messageId":"84","endLine":123,"endColumn":124},{"ruleId":"96","severity":1,"message":"97","line":212,"column":1,"nodeType":"98","messageId":"99","endLine":215,"endColumn":159},{"ruleId":"100","severity":1,"message":"101","line":45,"column":9,"nodeType":"102","messageId":"103","endLine":70,"endColumn":10},{"ruleId":"104","severity":1,"message":"105","line":215,"column":212,"nodeType":"83","messageId":"106","endLine":215,"endColumn":213},{"ruleId":"104","severity":1,"message":"105","line":215,"column":252,"nodeType":"83","messageId":"106","endLine":215,"endColumn":253},{"ruleId":"81","severity":1,"message":"82","line":45,"column":33,"nodeType":"83","messageId":"84","endLine":45,"endColumn":35},{"ruleId":"81","severity":1,"message":"82","line":45,"column":92,"nodeType":"83","messageId":"84","endLine":45,"endColumn":94},{"ruleId":"81","severity":1,"message":"82","line":47,"column":107,"nodeType":"83","messageId":"84","endLine":47,"endColumn":109},{"ruleId":"88","severity":1,"message":"92","line":15,"column":8,"nodeType":"90","messageId":"91","endLine":15,"endColumn":19},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react/jsx-pascal-case","Imported JSX component Login_Page must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'PostAddIcon' is defined but never used.","'FCAddNote' is defined but never used.","'AlertDialogSlide' is defined but never used.","'ITEM_HEIGHT' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","no-global-assign","no-unsafe-negation"]